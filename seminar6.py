#                                  СЕМИНАР 6

#                              ДОМАШНЕЕ ЗАДАНИЕ К СЕМИНАРУ 6 

# ЗАДАЧА 1. Заполните массив элементами арифметической прогрессии. Её первый элемент, разность
#           и количество элементов нужно ввести с клавиатуры. Формула для получения n-го члена 
#           прогрессии: an = a1 + (n-1) * d. Каждое число вводится с новой строки.
#                            7    1-5     2
# Ввод: 7 2 5, Вывод: 7 9 11 13 15
# a = int(input('Введите первый элемент:'))
# d = int(input('Введите разность: '))
# n = int(input('Введите количество элементов: '))
# array = [a+(n-1)*d for n in range(1, n+1)]
# print(array)

# ЗАДАЧА 2. Определить индексы элементов массива (списка), значения которых принадлежат
#           заданному диапазону (т.е. не меньше заданного минимума и не больше заданного
#           максимума)
# Ввод:  [-5, 9, 0, 3, -1, -2, 1, 4, -2, 10, 2, 0, -9, 8, 10, -9, 0, -5, -5, 7] 5 15
# Вывод: [1, 9, 13, 14, 19]
# a = [-5, 9, 0, 3, -1, -2, 1, 4, -2, 10, 2, 0, -9, 8, 10, -9, 0, -5, -5, 7]
# min = int(input('Введите минимум: '))
# max = int(input('Введите максимум: '))
# result = []
# for ind, val in enumerate(a):
#     if min < val < max:
#         result.append(ind)
# print(result)

# ЗАДАЧА 3.  Напишите программу, которая на вход принимает два числа A и B, и возводит число А
#            в целую степень B с помощью рекурсии.
# A = 3; B = 5 -> 243 (3⁵)
# A = 2; B = 3 -> 8

# a = int(input('Введите число: '))
# b = int(input('Введите степень: '))
# def pow(a, b):
#     if b==1:
#         return a
#     if b==0:
#         return 1
#     if b!=1:
#         return a*pow(a, b-1)
# c = pow(a, b)
# print(f'{a}**{b} = {c}')


# lambda, filter, zip, enumerate, list comprehension

# list comprehension (создание списков):
# a = [i for i in range(1, 10)] # Создание списка по i
# import random
# b = [random.randint(1, 10) for i in range(1, 10)]# Создание списка по рандом
# c = [i for i in range(1, 10) if i%2==0] # Создание списка с условием
# print(a) # [1, 2, 3, 4, 5, 6, 7, 8, 9]
# print(b) # [7, 9, 6, 8, 7, 9, 10, 9, 4]
# print(c) # [2, 4, 6, 8]

# enumerate (прохождение в цикле и по элементам и по индексам):
# a = [2, 4, 6, 8]
# for indx, val in enumerate(a): 
#     print(indx, val) 
# # 0 2
# # 1 4
# # 2 6
# # 3 8
# for indx, val in enumerate(a):
#     if val>5:
#         a[indx] = 0
# print(a) # [2, 4, 0, 0]

# zip (объединение списков в один):
# a = [1, 2, 3, 4, 5, 6]
# b = ['a', 'b', 'c', 'd', 'e', 'f']
# c = {1:'ddd', 2:'112'} # Словарь
# result = list(zip(a, b, c)) # Объединяет списки в список кортежей (берет соответственно первые 
# # элементы, потом вторые и т.д.), если разной длины списки, то берет по меньшему
# print(result) # [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (6, 'f')] - два списка
# # [(1, 'a', 1), (2, 'b', 2)] - со словарем
# print(result[1][1]) # b - второй элемент второго картежа

# lambda - используется для создания односрочной функции:
# def summ(a,b):
#     return a+b
# print(summ(2, 3)) # 5
# через лямбду это можно записать вот так:
# summ = lambda a, b:a+b
# print(summ(2, 3)) # 5
# можно добавить условие:
# summ = lambda a, b:a+b if a>5 else 0
# print(summ(2, 3)) # 0
# print(summ(7, 3)) # 10
# summ = lambda a, b, *args: a+b # Для неограниченного количества аргументов. Посчитает для первых
# # двух, а все остальное запишет в arg, из которого можно будет их достать
# print(summ(4, 4, 5, 2, 4,))

# map - позволяет применить функцию, примененную к первому элементу, ко всем элементам:
# a = [2, 4, 6, 8]
# def r(x):
#     return x*x
# a = list(map(r, a))
# print(a) # [4, 16, 36, 64]
# # Либо:
# a = list(map(lambda x:x*x, a))
# print(a) # [16, 256, 1296, 4096]

# filter - используется для фильтрации в т.ч. списков:
# a = [2, 4, 3, 4, 5, 6, 1, 2, 3]
# def sorting(x):
#     if x%2==0:
#         return True
# res = list(filter(sorting, a))
# res1 = list(filter(lambda x: not x%2, a)) # Через лямбду
# print(res) # [2, 4, 4, 6, 2]
# print(res1) # [2, 4, 4, 6, 2]

# sorted
# a = [(2, 4, 6), (4, 5, 5), (1, 2, 5)]
# res = sorted(a, key = lambda x: x[2]) # Отсортирует картежи по возрастанию последнего элемента
# print(res) # [(4, 5, 5), (1, 2, 5), (2, 4, 6)]
# res = sorted(a, key = lambda x: (x[2], x[1], x[0])) # Если последние элементы одинаковы, то по предпоследему и т.д.
# print(res) # [(1, 2, 5), (4, 5, 5), (2, 4, 6)]
# res = sorted(a, key = lambda x: x[2], reverse=True) # Разворачивает по убыванию
# print(res) # [(2, 4, 6), (4, 5, 5), (1, 2, 5)]

#                                  ЗАДАЧА СЕМИНАРА 6

# ЗАДАЧА 1. Напишите программу на Python для поиска пересечения двух заданных массивов 
#           с помощью Lambda, filter.
# [1, 2, 3, 5, 7, 8, 9, 10]
# [1, 2, 4, 8, 9]
# a = [1, 2, 3, 5, 7, 8, 9, 10]
# b = [1, 2, 4, 8, 9]
# res = list(filter(lambda x: x in a, b))
# res1 = list(filter(lambda x: x in b, a))
# print(res)
# print(res1)


# ЗАДАЧА 2. Имеется упорядоченный список: A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
#           Перебрать все элементы этого списка с помощью функций enumerate и элементы, 
#           стоящие на главной диагонали (имеющие равные индексы со списком и индексом элемента
#           внутри списка), превратить в нули.
# a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for ind, vl in enumerate(a):
#     for indx, val in enumerate(a[ind]):
#         if ind == indx:
#             a[ind][indx] = 0
# print(a)
# Или из семинара:
# a = [[1, 2, 3], # 0
#     [4, 5, 6],  # 1
#     [7, 8, 9]]  # 2
# #    0  1  2    
# for indx,val in enumerate(a):
#     #print(val[indx])
#     val[indx] = 0
# print(a)

            

# ЗАДАЧА 3. Имеется список id сотрудников из 10 элементов, каждый id - случайное число 
#           от 1 до 100 (сделать с помощью list_comprehension). Имеется список имен сотрудников
#           из 10 элементов (вручную). Сопоставьте каждому имени сотрудника его id по порядку,
#           и выведите получившийся список кортежей. Отсортировать список по возрастанию id. 
#           Выведете имена сотрудников, получившие нечетное id. Решить с помощью zip,filter,
#           lambda
# import random
# id = [random.randint(1, 100) for i in range(10)]
# name = ['df', 'sk', 'dk', 'as', 'aa', 'xb', 'zo', 'wh', 'ao', 'oo']
# print(id)
# print(name)
# spisok = list(zip(id, name))
# print(spisok)
# # sortSpisok = sorted(spisok, key = lambda x: x[0])
# sortSpisok = sorted(spisok) # сортирует по первому элементу по умолчанию
# print(sortSpisok)
# res = list(filter(lambda x: x[0]%2, sortSpisok))
# print(res)
# imena = list(map(lambda x: x[1], res))
# # a = list(map(lambda x:x*x, a))
# print(imena)
